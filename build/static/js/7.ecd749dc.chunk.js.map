{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","useParams","loadedPlaces","setLoadedPlaces","respondeData","console","log","places","fetchPlaces","LoadingSpinner","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.ecd749dc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\nimport './Map.css';\n\nconst Map = props => {\n    const mapRef = useRef();\n    const {center,zoom} = props;\n    useEffect(()=>{\n\n        const map = new window.google.maps.Map(mapRef.current, {\n            center: center,\n            zoom: zoom\n        });\n        new window.google.maps.Marker({ position: center, map: map })\n        \n\n    },[center, zoom]);\n\n\n    return (<div ref={mapRef} className={`map ${props.className}`} style={props.style}>\n\n    </div>);\n\n}\n\nexport default Map;","import React, {useState, useContext} from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport './PlaceItem.css';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport {useHttpClient} from '../../shared/hooks/http-hook';\nimport LoadindSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nconst PlaceItem = props => {\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n    const auth = useContext(AuthContext);\n    const [showMap, setShowMap] = useState(false);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const openMapHandler = () => setShowMap(true);\n    const closeMapHandler = () => setShowMap(false);\n    const showDeleteWarningHandler = () => {\n        setShowConfirmModal(true);\n      };\n    \n      const cancelDeleteHandler = () => {\n        setShowConfirmModal(false);\n      };\n    \n      const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false);\n        try{\n          await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`, 'DELETE', null, {\n            Authorization: 'Bearer '+auth.token\n          })\n          props.onDelete(props.id);\n        }catch(err){};\n      };\n    return (\n        <React.Fragment>\n        <ErrorModal error={error} onClear={clearError} />\n        <Modal show={showMap} onCancel={closeMapHandler} header={props.address} contentClass=\"place-item__modal-content\" footerClass=\"place-item__modal-actions\" footer={<Button onClick={closeMapHandler}>CLOSE</Button>} >\n            <div className=\"map-container\"><Map center={props.coordinates} zoom={16}/></div>\n        </Modal>\n        <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n            <p>Do you to proceed and delete this place? Please note that it can't be underdone thereafter.</p>\n        </Modal>\n        <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n            {isLoading && <LoadindSpinner asOverlay />}\n            <div className=\"place-item__image\">\n                <img src={`${process.env.REACT_APP_ASSETS_URL}/${props.image}`} alt={props.title} />\n\n            </div>\n            <div className=\"place-item__info\">\n                <h2>{props.title}</h2>\n                <h3>{props.address}</h3>\n                <h3>{props.description}</h3>\n            </div>\n            <div className=\"place-item__actions\">\n                <Button inverse onClick={openMapHandler}>VIEW ON MAP</Button>\n               { auth.userId === props.creatorId && <Button to={ `/places/${props.id}`}>EDIT</Button>}\n                {  auth.userId === props.creatorId && <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>}\n            </div>\n        </Card>\n    </li></React.Fragment>);\n}\n\nexport default PlaceItem;","import React from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from '../components/PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\nimport './PlaceList.css';\n\nconst PlaceList = props => {\n\n    if (props.items.length === 0) {\n        return (<div className=\"place-list center\">\n            <Card>\n                <h2>No places found. Maybe create one?</h2>\n                <Button to=\"/places/new\">Share Place</Button>\n            </Card>\n        </div>)\n    }\n\n    return (<ul className=\"place-list\">\n        {props.items.map(place => {\n            return <PlaceItem key={place.id} id={place.id} image={place.image} title={place.title} description={place.description} address={place.address} creatorId={place.creator} coordinates={place.location} onDelete={props.onDeletePlace}/>\n        })}\n    </ul>)\n\n}\n\nexport default PlaceList;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst UserPlaces = () => {\n    const userId = useParams().userId;\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n    const [loadedPlaces, setLoadedPlaces] = useState();\n    useEffect(() => {\n        const fetchPlaces = async () => {\n            try {\n                const respondeData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\n                console.log(respondeData);\n                setLoadedPlaces(respondeData.places);\n\n            } catch (err) { }\n        }\n        fetchPlaces();\n    }, [sendRequest, userId]);\n\n    const placeDeletedHandler = (deletedPlaceId) =>{\n        setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId))\n    }\n    return (<React.Fragment>\n        <ErrorModal error={error} onClear={clearError} />\n        {isLoading && <div className=\"center\"><LoadingSpinner /></div>}\n        {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler}/>}\n    </React.Fragment>);\n}\n\nexport default UserPlaces;"],"sourceRoot":""}